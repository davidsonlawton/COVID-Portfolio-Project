{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "532d29d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>poster</th>\n",
       "      <th>title</th>\n",
       "      <th>certificate</th>\n",
       "      <th>runtime</th>\n",
       "      <th>genre</th>\n",
       "      <th>rating</th>\n",
       "      <th>about</th>\n",
       "      <th>director</th>\n",
       "      <th>stars</th>\n",
       "      <th>votes</th>\n",
       "      <th>gross_earn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>https://m.media-amazon.com/images/S/sash/4Fyxw...</td>\n",
       "      <td>The Shawshank Redemption</td>\n",
       "      <td>15</td>\n",
       "      <td>142 min</td>\n",
       "      <td>Drama</td>\n",
       "      <td>9.3</td>\n",
       "      <td>Two imprisoned men bond over a number of years...</td>\n",
       "      <td>Frank Darabont</td>\n",
       "      <td>('Tim Robbins',), ('Morgan Freeman',), ('Bob G...</td>\n",
       "      <td>26,26,905</td>\n",
       "      <td>$28.34M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>https://m.media-amazon.com/images/S/sash/4Fyxw...</td>\n",
       "      <td>The Dark Knight</td>\n",
       "      <td>12A</td>\n",
       "      <td>152 min</td>\n",
       "      <td>Action, Crime, Drama</td>\n",
       "      <td>9.0</td>\n",
       "      <td>When the menace known as the Joker wreaks havo...</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>('Christian Bale',), ('Heath Ledger',), ('Aaro...</td>\n",
       "      <td>25,98,173</td>\n",
       "      <td>$534.86M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>https://m.media-amazon.com/images/S/sash/4Fyxw...</td>\n",
       "      <td>Inception</td>\n",
       "      <td>12A</td>\n",
       "      <td>148 min</td>\n",
       "      <td>Action, Adventure, Sci-Fi</td>\n",
       "      <td>8.8</td>\n",
       "      <td>A thief who steals corporate secrets through t...</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>('Leonardo DiCaprio',), ('Joseph Gordon-Levitt...</td>\n",
       "      <td>23,04,062</td>\n",
       "      <td>$292.58M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>https://m.media-amazon.com/images/S/sash/4Fyxw...</td>\n",
       "      <td>Fight Club</td>\n",
       "      <td>18</td>\n",
       "      <td>139 min</td>\n",
       "      <td>Drama</td>\n",
       "      <td>8.8</td>\n",
       "      <td>An insomniac office worker and a devil-may-car...</td>\n",
       "      <td>David Fincher</td>\n",
       "      <td>('Brad Pitt',), ('Edward Norton',), ('Meat Loa...</td>\n",
       "      <td>20,71,088</td>\n",
       "      <td>$37.03M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>https://m.media-amazon.com/images/S/sash/4Fyxw...</td>\n",
       "      <td>Pulp Fiction</td>\n",
       "      <td>18</td>\n",
       "      <td>154 min</td>\n",
       "      <td>Crime, Drama</td>\n",
       "      <td>8.9</td>\n",
       "      <td>The lives of two mob hitmen, a boxer, a gangst...</td>\n",
       "      <td>Quentin Tarantino</td>\n",
       "      <td>('John Travolta',), ('Uma Thurman',), ('Samuel...</td>\n",
       "      <td>20,11,013</td>\n",
       "      <td>$107.93M</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              poster  \\\n",
       "0  https://m.media-amazon.com/images/S/sash/4Fyxw...   \n",
       "1  https://m.media-amazon.com/images/S/sash/4Fyxw...   \n",
       "2  https://m.media-amazon.com/images/S/sash/4Fyxw...   \n",
       "3  https://m.media-amazon.com/images/S/sash/4Fyxw...   \n",
       "4  https://m.media-amazon.com/images/S/sash/4Fyxw...   \n",
       "\n",
       "                      title certificate  runtime                      genre  \\\n",
       "0  The Shawshank Redemption          15  142 min                      Drama   \n",
       "1           The Dark Knight         12A  152 min       Action, Crime, Drama   \n",
       "2                 Inception         12A  148 min  Action, Adventure, Sci-Fi   \n",
       "3                Fight Club          18  139 min                      Drama   \n",
       "4              Pulp Fiction          18  154 min               Crime, Drama   \n",
       "\n",
       "   rating                                              about  \\\n",
       "0     9.3  Two imprisoned men bond over a number of years...   \n",
       "1     9.0  When the menace known as the Joker wreaks havo...   \n",
       "2     8.8  A thief who steals corporate secrets through t...   \n",
       "3     8.8  An insomniac office worker and a devil-may-car...   \n",
       "4     8.9  The lives of two mob hitmen, a boxer, a gangst...   \n",
       "\n",
       "            director                                              stars  \\\n",
       "0     Frank Darabont  ('Tim Robbins',), ('Morgan Freeman',), ('Bob G...   \n",
       "1  Christopher Nolan  ('Christian Bale',), ('Heath Ledger',), ('Aaro...   \n",
       "2  Christopher Nolan  ('Leonardo DiCaprio',), ('Joseph Gordon-Levitt...   \n",
       "3      David Fincher  ('Brad Pitt',), ('Edward Norton',), ('Meat Loa...   \n",
       "4  Quentin Tarantino  ('John Travolta',), ('Uma Thurman',), ('Samuel...   \n",
       "\n",
       "       votes gross_earn  \n",
       "0  26,26,905    $28.34M  \n",
       "1  25,98,173   $534.86M  \n",
       "2  23,04,062   $292.58M  \n",
       "3  20,71,088    $37.03M  \n",
       "4  20,11,013   $107.93M  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import re\n",
    "\n",
    "# Load the dataset \n",
    "movies1 = pd.read_csv('movies.csv')\n",
    "movies = movies1[['title', 'genre', 'rating', 'runtime', 'votes', 'director', 'gross_earn']]\n",
    "movies1.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e4b6e992",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "91ed8f73",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/qh/81164_ks5gn9fq0dc70qm_fh0000gn/T/ipykernel_59329/788055161.py:10: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  movies['runtime'][i] = runtime\n",
      "/var/folders/qh/81164_ks5gn9fq0dc70qm_fh0000gn/T/ipykernel_59329/788055161.py:18: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  movies['runtime'][i] = int(mean_runtime)\n"
     ]
    }
   ],
   "source": [
    "# runtime is formatted using avrage as a replacement for a null\n",
    "total_runtime = 0\n",
    "num_movies = 0\n",
    "#predict gross earnings \n",
    "#director evpetice 10 movies > director\n",
    "#certificae {looks at housing example in canelink bte}\n",
    "for i in range(len(movies['runtime'])):\n",
    "    try:\n",
    "        runtime = int(movies['runtime'][i].replace(' min', ''))\n",
    "        movies['runtime'][i] = runtime\n",
    "        total_runtime += runtime\n",
    "        num_movies += 1\n",
    "    except ValueError:\n",
    "        if num_movies == 0:\n",
    "            movies['runtime'][i] = -1\n",
    "        else:\n",
    "            mean_runtime = total_runtime / num_movies\n",
    "            movies['runtime'][i] = int(mean_runtime)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7eb416e0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c8a90f71",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/qh/81164_ks5gn9fq0dc70qm_fh0000gn/T/ipykernel_59329/399998552.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  movies['genres_list'] = movies['genre'].str.split(', ')\n",
      "/var/folders/qh/81164_ks5gn9fq0dc70qm_fh0000gn/T/ipykernel_59329/399998552.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  movies['genres_list'] = movies['genres_list'].apply(lambda x: sorted(x) if isinstance(x, list) else [])\n",
      "/var/folders/qh/81164_ks5gn9fq0dc70qm_fh0000gn/T/ipykernel_59329/399998552.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  movies['genres_list'] = movies['genres_list'].apply(lambda x: x if x else ['Unknown'])\n"
     ]
    }
   ],
   "source": [
    "# formatt for genre\n",
    "movies['genres_list'] = movies['genre'].str.split(', ')\n",
    "movies['genres_list'] = movies['genres_list'].apply(lambda x: sorted(x) if isinstance(x, list) else [])\n",
    "movies['genres_list'] = movies['genres_list'].apply(lambda x: x if x else ['Unknown'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5ade9003",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>genre</th>\n",
       "      <th>rating</th>\n",
       "      <th>runtime</th>\n",
       "      <th>votes</th>\n",
       "      <th>director</th>\n",
       "      <th>gross_earn</th>\n",
       "      <th>genres_list</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Shawshank Redemption</td>\n",
       "      <td>Drama</td>\n",
       "      <td>9.3</td>\n",
       "      <td>142</td>\n",
       "      <td>26,26,905</td>\n",
       "      <td>Frank Darabont</td>\n",
       "      <td>$28.34M</td>\n",
       "      <td>[Drama]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The Dark Knight</td>\n",
       "      <td>Action, Crime, Drama</td>\n",
       "      <td>9.0</td>\n",
       "      <td>152</td>\n",
       "      <td>25,98,173</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>$534.86M</td>\n",
       "      <td>[Action, Crime, Drama]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Inception</td>\n",
       "      <td>Action, Adventure, Sci-Fi</td>\n",
       "      <td>8.8</td>\n",
       "      <td>148</td>\n",
       "      <td>23,04,062</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>$292.58M</td>\n",
       "      <td>[Action, Adventure, Sci-Fi]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Fight Club</td>\n",
       "      <td>Drama</td>\n",
       "      <td>8.8</td>\n",
       "      <td>139</td>\n",
       "      <td>20,71,088</td>\n",
       "      <td>David Fincher</td>\n",
       "      <td>$37.03M</td>\n",
       "      <td>[Drama]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Pulp Fiction</td>\n",
       "      <td>Crime, Drama</td>\n",
       "      <td>8.9</td>\n",
       "      <td>154</td>\n",
       "      <td>20,11,013</td>\n",
       "      <td>Quentin Tarantino</td>\n",
       "      <td>$107.93M</td>\n",
       "      <td>[Crime, Drama]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>District 9</td>\n",
       "      <td>Action, Sci-Fi, Thriller</td>\n",
       "      <td>7.9</td>\n",
       "      <td>112</td>\n",
       "      <td>6,76,036</td>\n",
       "      <td>Neill Blomkamp</td>\n",
       "      <td>$115.65M</td>\n",
       "      <td>[Action, Sci-Fi, Thriller]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>I Am Legend</td>\n",
       "      <td>Action, Drama, Sci-Fi</td>\n",
       "      <td>7.2</td>\n",
       "      <td>101</td>\n",
       "      <td>7,47,517</td>\n",
       "      <td>Francis Lawrence</td>\n",
       "      <td>$256.39M</td>\n",
       "      <td>[Action, Drama, Sci-Fi]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>Catch Me If You Can</td>\n",
       "      <td>Biography, Crime, Drama</td>\n",
       "      <td>8.1</td>\n",
       "      <td>141</td>\n",
       "      <td>9,58,178</td>\n",
       "      <td>Steven Spielberg</td>\n",
       "      <td>$164.62M</td>\n",
       "      <td>[Biography, Crime, Drama]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>Skyfall</td>\n",
       "      <td>Action, Adventure, Thriller</td>\n",
       "      <td>7.8</td>\n",
       "      <td>143</td>\n",
       "      <td>6,91,070</td>\n",
       "      <td>Sam Mendes</td>\n",
       "      <td>$304.36M</td>\n",
       "      <td>[Action, Adventure, Thriller]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>Pirates of the Caribbean: Dead Man's Chest</td>\n",
       "      <td>Action, Adventure, Fantasy</td>\n",
       "      <td>7.3</td>\n",
       "      <td>151</td>\n",
       "      <td>7,10,348</td>\n",
       "      <td>Gore Verbinski</td>\n",
       "      <td>$423.32M</td>\n",
       "      <td>[Action, Adventure, Fantasy]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         title                        genre  \\\n",
       "0                     The Shawshank Redemption                        Drama   \n",
       "1                              The Dark Knight         Action, Crime, Drama   \n",
       "2                                    Inception    Action, Adventure, Sci-Fi   \n",
       "3                                   Fight Club                        Drama   \n",
       "4                                 Pulp Fiction                 Crime, Drama   \n",
       "..                                         ...                          ...   \n",
       "95                                  District 9     Action, Sci-Fi, Thriller   \n",
       "96                                 I Am Legend        Action, Drama, Sci-Fi   \n",
       "97                         Catch Me If You Can      Biography, Crime, Drama   \n",
       "98                                     Skyfall  Action, Adventure, Thriller   \n",
       "99  Pirates of the Caribbean: Dead Man's Chest   Action, Adventure, Fantasy   \n",
       "\n",
       "    rating runtime      votes           director gross_earn  \\\n",
       "0      9.3     142  26,26,905     Frank Darabont    $28.34M   \n",
       "1      9.0     152  25,98,173  Christopher Nolan   $534.86M   \n",
       "2      8.8     148  23,04,062  Christopher Nolan   $292.58M   \n",
       "3      8.8     139  20,71,088      David Fincher    $37.03M   \n",
       "4      8.9     154  20,11,013  Quentin Tarantino   $107.93M   \n",
       "..     ...     ...        ...                ...        ...   \n",
       "95     7.9     112   6,76,036     Neill Blomkamp   $115.65M   \n",
       "96     7.2     101   7,47,517   Francis Lawrence   $256.39M   \n",
       "97     8.1     141   9,58,178   Steven Spielberg   $164.62M   \n",
       "98     7.8     143   6,91,070         Sam Mendes   $304.36M   \n",
       "99     7.3     151   7,10,348     Gore Verbinski   $423.32M   \n",
       "\n",
       "                      genres_list  \n",
       "0                         [Drama]  \n",
       "1          [Action, Crime, Drama]  \n",
       "2     [Action, Adventure, Sci-Fi]  \n",
       "3                         [Drama]  \n",
       "4                  [Crime, Drama]  \n",
       "..                            ...  \n",
       "95     [Action, Sci-Fi, Thriller]  \n",
       "96        [Action, Drama, Sci-Fi]  \n",
       "97      [Biography, Crime, Drama]  \n",
       "98  [Action, Adventure, Thriller]  \n",
       "99   [Action, Adventure, Fantasy]  \n",
       "\n",
       "[100 rows x 8 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies.head(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84b94ee6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7edf6332",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/qh/81164_ks5gn9fq0dc70qm_fh0000gn/T/ipykernel_59329/313051277.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  movies['votes'] = movies['votes'].str.replace(',', '')\n",
      "/var/folders/qh/81164_ks5gn9fq0dc70qm_fh0000gn/T/ipykernel_59329/313051277.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  movies['votes'] = movies['votes'].str.replace(',', '').astype(float)\n"
     ]
    }
   ],
   "source": [
    "#cleaning votes to float\n",
    "movies['votes'] = movies['votes'].str.replace(',', '')\n",
    "#movies = movies.dropna(subset=['votes'])\n",
    "movies['votes'] = movies['votes'].str.replace(',', '').astype(float)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "232dfd2c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ebdf502b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/qh/81164_ks5gn9fq0dc70qm_fh0000gn/T/ipykernel_59329/2381397896.py:2: FutureWarning: The default value of regex will change from True to False in a future version. In addition, single character regular expressions will *not* be treated as literal strings when regex=True.\n",
      "  movies['gross_earn'] = movies['gross_earn'].str.replace('$', '').str.replace('M', '').astype(float) * 1e6\n",
      "/var/folders/qh/81164_ks5gn9fq0dc70qm_fh0000gn/T/ipykernel_59329/2381397896.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  movies['gross_earn'] = movies['gross_earn'].str.replace('$', '').str.replace('M', '').astype(float) * 1e6\n"
     ]
    }
   ],
   "source": [
    "# formatting gross_earn\n",
    "movies['gross_earn'] = movies['gross_earn'].str.replace('$', '').str.replace('M', '').astype(float) * 1e6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "98f3181b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/qh/81164_ks5gn9fq0dc70qm_fh0000gn/T/ipykernel_59329/1503337091.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  movies.dropna(subset=['gross_earn'], inplace=True)\n"
     ]
    }
   ],
   "source": [
    "movies.dropna(subset=['gross_earn'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "26d690a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     runtime      votes   gross_earn  rating\n",
      "0        142  2626905.0   28340000.0     9.3\n",
      "1        152  2598173.0  534860000.0     9.0\n",
      "2        148  2304062.0  292580000.0     8.8\n",
      "3        139  2071088.0   37030000.0     8.8\n",
      "4        154  2011013.0  107930000.0     8.9\n",
      "...      ...        ...          ...     ...\n",
      "4992      94    20309.0    6240000.0     6.2\n",
      "4993     117    25669.0   23000000.0     6.3\n",
      "4995     102    25112.0    9400000.0     7.3\n",
      "4998      92    21536.0    6670000.0     7.0\n",
      "4999     120    25097.0    8200000.0     7.6\n",
      "\n",
      "[4585 rows x 4 columns]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "selected_columns = ['runtime', 'votes', 'gross_earn', 'rating']\n",
    "movies_subset = movies[selected_columns]\n",
    "\n",
    "print(movies_subset)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dd17ad53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15           1843\n",
       "12A           788\n",
       "18            659\n",
       "PG            614\n",
       "U             362\n",
       "12            278\n",
       "A             186\n",
       "X             134\n",
       "AA             59\n",
       "R              12\n",
       "UA             11\n",
       "PG-13          11\n",
       "Not Rated       7\n",
       "Rejected        5\n",
       "90 min          3\n",
       "106 min         2\n",
       "104 min         2\n",
       "99 min          2\n",
       "114 min         2\n",
       "70 min          1\n",
       "142 min         1\n",
       "103 min         1\n",
       "89 min          1\n",
       "112 min         1\n",
       "102 min         1\n",
       "98 min          1\n",
       "116 min         1\n",
       "119 min         1\n",
       "170 min         1\n",
       "140 min         1\n",
       "(Banned)        1\n",
       "87 min          1\n",
       "124 min         1\n",
       "107 min         1\n",
       "97 min          1\n",
       "93 min          1\n",
       "100 min         1\n",
       "137 min         1\n",
       "144 min         1\n",
       "Name: certificate, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies1['certificate'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "38ad95f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "valid_certificates = ['Film rated', '15', '12A', '18', 'PG', 'U', '12', 'A', 'X']\n",
    "movies1 = movies1[movies1['certificate'].isin(valid_certificates)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a1198479",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4864, 11)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies1_na = movies1.dropna(subset = [\"certificate\"])\n",
    "movies1_na.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5953a30a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "acd94cfd",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>runtime</th>\n",
       "      <th>genre</th>\n",
       "      <th>rating</th>\n",
       "      <th>director</th>\n",
       "      <th>votes</th>\n",
       "      <th>gross_earn</th>\n",
       "      <th>12</th>\n",
       "      <th>12A</th>\n",
       "      <th>15</th>\n",
       "      <th>18</th>\n",
       "      <th>A</th>\n",
       "      <th>PG</th>\n",
       "      <th>U</th>\n",
       "      <th>X</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Shawshank Redemption</td>\n",
       "      <td>142 min</td>\n",
       "      <td>Drama</td>\n",
       "      <td>9.3</td>\n",
       "      <td>Frank Darabont</td>\n",
       "      <td>26,26,905</td>\n",
       "      <td>$28.34M</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The Dark Knight</td>\n",
       "      <td>152 min</td>\n",
       "      <td>Action, Crime, Drama</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>25,98,173</td>\n",
       "      <td>$534.86M</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Inception</td>\n",
       "      <td>148 min</td>\n",
       "      <td>Action, Adventure, Sci-Fi</td>\n",
       "      <td>8.8</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>23,04,062</td>\n",
       "      <td>$292.58M</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Fight Club</td>\n",
       "      <td>139 min</td>\n",
       "      <td>Drama</td>\n",
       "      <td>8.8</td>\n",
       "      <td>David Fincher</td>\n",
       "      <td>20,71,088</td>\n",
       "      <td>$37.03M</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Pulp Fiction</td>\n",
       "      <td>154 min</td>\n",
       "      <td>Crime, Drama</td>\n",
       "      <td>8.9</td>\n",
       "      <td>Quentin Tarantino</td>\n",
       "      <td>20,11,013</td>\n",
       "      <td>$107.93M</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      title  runtime                      genre  rating  \\\n",
       "0  The Shawshank Redemption  142 min                      Drama     9.3   \n",
       "1           The Dark Knight  152 min       Action, Crime, Drama     9.0   \n",
       "2                 Inception  148 min  Action, Adventure, Sci-Fi     8.8   \n",
       "3                Fight Club  139 min                      Drama     8.8   \n",
       "4              Pulp Fiction  154 min               Crime, Drama     8.9   \n",
       "\n",
       "            director      votes gross_earn  12  12A  15  18  A  PG  U  X  \n",
       "0     Frank Darabont  26,26,905    $28.34M   0    0   1   0  0   0  0  0  \n",
       "1  Christopher Nolan  25,98,173   $534.86M   0    1   0   0  0   0  0  0  \n",
       "2  Christopher Nolan  23,04,062   $292.58M   0    1   0   0  0   0  0  0  \n",
       "3      David Fincher  20,71,088    $37.03M   0    0   0   1  0   0  0  0  \n",
       "4  Quentin Tarantino  20,11,013   $107.93M   0    0   0   1  0   0  0  0  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dummies = pd.get_dummies(movies1_na.certificate)\n",
    "dummies.head()\n",
    "movies1_na_dummies = pd.concat([movies1_na,dummies], axis = 'columns')\n",
    "movies1_na_dummies.head()\n",
    "movies1_clean = movies1_na_dummies.drop(['certificate','poster','about','stars'], axis = 'columns') #drop original column and observation column, the one with the lowest observations\n",
    "movies1_clean.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9eac757",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c5304ed6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "director_exp = movies1['director'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cb410af3",
   "metadata": {},
   "outputs": [],
   "source": [
    "movies1_clean['director_experience'] = movies1_clean.groupby('director')['title'].transform('count')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8c95061f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>runtime</th>\n",
       "      <th>genre</th>\n",
       "      <th>rating</th>\n",
       "      <th>director</th>\n",
       "      <th>votes</th>\n",
       "      <th>gross_earn</th>\n",
       "      <th>12</th>\n",
       "      <th>12A</th>\n",
       "      <th>15</th>\n",
       "      <th>18</th>\n",
       "      <th>A</th>\n",
       "      <th>PG</th>\n",
       "      <th>U</th>\n",
       "      <th>X</th>\n",
       "      <th>director_experience</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Shawshank Redemption</td>\n",
       "      <td>142 min</td>\n",
       "      <td>Drama</td>\n",
       "      <td>9.3</td>\n",
       "      <td>Frank Darabont</td>\n",
       "      <td>26,26,905</td>\n",
       "      <td>$28.34M</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The Dark Knight</td>\n",
       "      <td>152 min</td>\n",
       "      <td>Action, Crime, Drama</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>25,98,173</td>\n",
       "      <td>$534.86M</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Inception</td>\n",
       "      <td>148 min</td>\n",
       "      <td>Action, Adventure, Sci-Fi</td>\n",
       "      <td>8.8</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>23,04,062</td>\n",
       "      <td>$292.58M</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Fight Club</td>\n",
       "      <td>139 min</td>\n",
       "      <td>Drama</td>\n",
       "      <td>8.8</td>\n",
       "      <td>David Fincher</td>\n",
       "      <td>20,71,088</td>\n",
       "      <td>$37.03M</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Pulp Fiction</td>\n",
       "      <td>154 min</td>\n",
       "      <td>Crime, Drama</td>\n",
       "      <td>8.9</td>\n",
       "      <td>Quentin Tarantino</td>\n",
       "      <td>20,11,013</td>\n",
       "      <td>$107.93M</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      title  runtime                      genre  rating  \\\n",
       "0  The Shawshank Redemption  142 min                      Drama     9.3   \n",
       "1           The Dark Knight  152 min       Action, Crime, Drama     9.0   \n",
       "2                 Inception  148 min  Action, Adventure, Sci-Fi     8.8   \n",
       "3                Fight Club  139 min                      Drama     8.8   \n",
       "4              Pulp Fiction  154 min               Crime, Drama     8.9   \n",
       "\n",
       "            director      votes gross_earn  12  12A  15  18  A  PG  U  X  \\\n",
       "0     Frank Darabont  26,26,905    $28.34M   0    0   1   0  0   0  0  0   \n",
       "1  Christopher Nolan  25,98,173   $534.86M   0    1   0   0  0   0  0  0   \n",
       "2  Christopher Nolan  23,04,062   $292.58M   0    1   0   0  0   0  0  0   \n",
       "3      David Fincher  20,71,088    $37.03M   0    0   0   1  0   0  0  0   \n",
       "4  Quentin Tarantino  20,11,013   $107.93M   0    0   0   1  0   0  0  0   \n",
       "\n",
       "   director_experience  \n",
       "0                    4  \n",
       "1                    9  \n",
       "2                    9  \n",
       "3                   10  \n",
       "4                    9  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies1_clean.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "cc00780d",
   "metadata": {},
   "outputs": [],
   "source": [
    "movies1_clean['num_genres'] = movies1_clean['genre'].str.count(',')+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "5d53762f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>runtime</th>\n",
       "      <th>genre</th>\n",
       "      <th>rating</th>\n",
       "      <th>director</th>\n",
       "      <th>votes</th>\n",
       "      <th>gross_earn</th>\n",
       "      <th>12</th>\n",
       "      <th>12A</th>\n",
       "      <th>15</th>\n",
       "      <th>18</th>\n",
       "      <th>A</th>\n",
       "      <th>PG</th>\n",
       "      <th>U</th>\n",
       "      <th>X</th>\n",
       "      <th>director_experience</th>\n",
       "      <th>num_genres</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Shawshank Redemption</td>\n",
       "      <td>142 min</td>\n",
       "      <td>Drama</td>\n",
       "      <td>9.3</td>\n",
       "      <td>Frank Darabont</td>\n",
       "      <td>26,26,905</td>\n",
       "      <td>$28.34M</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The Dark Knight</td>\n",
       "      <td>152 min</td>\n",
       "      <td>Action, Crime, Drama</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>25,98,173</td>\n",
       "      <td>$534.86M</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Inception</td>\n",
       "      <td>148 min</td>\n",
       "      <td>Action, Adventure, Sci-Fi</td>\n",
       "      <td>8.8</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>23,04,062</td>\n",
       "      <td>$292.58M</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Fight Club</td>\n",
       "      <td>139 min</td>\n",
       "      <td>Drama</td>\n",
       "      <td>8.8</td>\n",
       "      <td>David Fincher</td>\n",
       "      <td>20,71,088</td>\n",
       "      <td>$37.03M</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Pulp Fiction</td>\n",
       "      <td>154 min</td>\n",
       "      <td>Crime, Drama</td>\n",
       "      <td>8.9</td>\n",
       "      <td>Quentin Tarantino</td>\n",
       "      <td>20,11,013</td>\n",
       "      <td>$107.93M</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      title  runtime                      genre  rating  \\\n",
       "0  The Shawshank Redemption  142 min                      Drama     9.3   \n",
       "1           The Dark Knight  152 min       Action, Crime, Drama     9.0   \n",
       "2                 Inception  148 min  Action, Adventure, Sci-Fi     8.8   \n",
       "3                Fight Club  139 min                      Drama     8.8   \n",
       "4              Pulp Fiction  154 min               Crime, Drama     8.9   \n",
       "\n",
       "            director      votes gross_earn  12  12A  15  18  A  PG  U  X  \\\n",
       "0     Frank Darabont  26,26,905    $28.34M   0    0   1   0  0   0  0  0   \n",
       "1  Christopher Nolan  25,98,173   $534.86M   0    1   0   0  0   0  0  0   \n",
       "2  Christopher Nolan  23,04,062   $292.58M   0    1   0   0  0   0  0  0   \n",
       "3      David Fincher  20,71,088    $37.03M   0    0   0   1  0   0  0  0   \n",
       "4  Quentin Tarantino  20,11,013   $107.93M   0    0   0   1  0   0  0  0   \n",
       "\n",
       "   director_experience  num_genres  \n",
       "0                    4           1  \n",
       "1                    9           3  \n",
       "2                    9           3  \n",
       "3                   10           1  \n",
       "4                    9           2  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies1_clean.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "53d8d353",
   "metadata": {},
   "outputs": [],
   "source": [
    "movies1_clean['main_genre'] = movies1_clean['genre'].str.split(',').str[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "904ac43e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>runtime</th>\n",
       "      <th>genre</th>\n",
       "      <th>rating</th>\n",
       "      <th>director</th>\n",
       "      <th>votes</th>\n",
       "      <th>gross_earn</th>\n",
       "      <th>12</th>\n",
       "      <th>12A</th>\n",
       "      <th>15</th>\n",
       "      <th>18</th>\n",
       "      <th>A</th>\n",
       "      <th>PG</th>\n",
       "      <th>U</th>\n",
       "      <th>X</th>\n",
       "      <th>director_experience</th>\n",
       "      <th>num_genres</th>\n",
       "      <th>main_genre</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Shawshank Redemption</td>\n",
       "      <td>142 min</td>\n",
       "      <td>Drama</td>\n",
       "      <td>9.3</td>\n",
       "      <td>Frank Darabont</td>\n",
       "      <td>26,26,905</td>\n",
       "      <td>$28.34M</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The Dark Knight</td>\n",
       "      <td>152 min</td>\n",
       "      <td>Action, Crime, Drama</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>25,98,173</td>\n",
       "      <td>$534.86M</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>Action</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Inception</td>\n",
       "      <td>148 min</td>\n",
       "      <td>Action, Adventure, Sci-Fi</td>\n",
       "      <td>8.8</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>23,04,062</td>\n",
       "      <td>$292.58M</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>Action</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Fight Club</td>\n",
       "      <td>139 min</td>\n",
       "      <td>Drama</td>\n",
       "      <td>8.8</td>\n",
       "      <td>David Fincher</td>\n",
       "      <td>20,71,088</td>\n",
       "      <td>$37.03M</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Pulp Fiction</td>\n",
       "      <td>154 min</td>\n",
       "      <td>Crime, Drama</td>\n",
       "      <td>8.9</td>\n",
       "      <td>Quentin Tarantino</td>\n",
       "      <td>20,11,013</td>\n",
       "      <td>$107.93M</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>Crime</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      title  runtime                      genre  rating  \\\n",
       "0  The Shawshank Redemption  142 min                      Drama     9.3   \n",
       "1           The Dark Knight  152 min       Action, Crime, Drama     9.0   \n",
       "2                 Inception  148 min  Action, Adventure, Sci-Fi     8.8   \n",
       "3                Fight Club  139 min                      Drama     8.8   \n",
       "4              Pulp Fiction  154 min               Crime, Drama     8.9   \n",
       "\n",
       "            director      votes gross_earn  12  12A  15  18  A  PG  U  X  \\\n",
       "0     Frank Darabont  26,26,905    $28.34M   0    0   1   0  0   0  0  0   \n",
       "1  Christopher Nolan  25,98,173   $534.86M   0    1   0   0  0   0  0  0   \n",
       "2  Christopher Nolan  23,04,062   $292.58M   0    1   0   0  0   0  0  0   \n",
       "3      David Fincher  20,71,088    $37.03M   0    0   0   1  0   0  0  0   \n",
       "4  Quentin Tarantino  20,11,013   $107.93M   0    0   0   1  0   0  0  0   \n",
       "\n",
       "   director_experience  num_genres main_genre  \n",
       "0                    4           1      Drama  \n",
       "1                    9           3     Action  \n",
       "2                    9           3     Action  \n",
       "3                   10           1      Drama  \n",
       "4                    9           2      Crime  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies1_clean.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a83bdbdb",
   "metadata": {},
   "outputs": [],
   "source": [
    "bins = [0, 1, 5, 10, movies1_clean['director_experience'].max()]\n",
    "labels = ['1', '2', '3', '4']\n",
    "\n",
    "movies1_clean['director_level'] = pd.cut(movies1_clean['director_experience'], bins=bins, labels=labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b0f7847f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>runtime</th>\n",
       "      <th>genre</th>\n",
       "      <th>rating</th>\n",
       "      <th>director</th>\n",
       "      <th>votes</th>\n",
       "      <th>gross_earn</th>\n",
       "      <th>12</th>\n",
       "      <th>12A</th>\n",
       "      <th>15</th>\n",
       "      <th>18</th>\n",
       "      <th>A</th>\n",
       "      <th>PG</th>\n",
       "      <th>U</th>\n",
       "      <th>X</th>\n",
       "      <th>director_experience</th>\n",
       "      <th>num_genres</th>\n",
       "      <th>main_genre</th>\n",
       "      <th>director_level</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Shawshank Redemption</td>\n",
       "      <td>142 min</td>\n",
       "      <td>Drama</td>\n",
       "      <td>9.3</td>\n",
       "      <td>Frank Darabont</td>\n",
       "      <td>26,26,905</td>\n",
       "      <td>$28.34M</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>Drama</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The Dark Knight</td>\n",
       "      <td>152 min</td>\n",
       "      <td>Action, Crime, Drama</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>25,98,173</td>\n",
       "      <td>$534.86M</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>Action</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Inception</td>\n",
       "      <td>148 min</td>\n",
       "      <td>Action, Adventure, Sci-Fi</td>\n",
       "      <td>8.8</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>23,04,062</td>\n",
       "      <td>$292.58M</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>Action</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Fight Club</td>\n",
       "      <td>139 min</td>\n",
       "      <td>Drama</td>\n",
       "      <td>8.8</td>\n",
       "      <td>David Fincher</td>\n",
       "      <td>20,71,088</td>\n",
       "      <td>$37.03M</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>Drama</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Pulp Fiction</td>\n",
       "      <td>154 min</td>\n",
       "      <td>Crime, Drama</td>\n",
       "      <td>8.9</td>\n",
       "      <td>Quentin Tarantino</td>\n",
       "      <td>20,11,013</td>\n",
       "      <td>$107.93M</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>Crime</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      title  runtime                      genre  rating  \\\n",
       "0  The Shawshank Redemption  142 min                      Drama     9.3   \n",
       "1           The Dark Knight  152 min       Action, Crime, Drama     9.0   \n",
       "2                 Inception  148 min  Action, Adventure, Sci-Fi     8.8   \n",
       "3                Fight Club  139 min                      Drama     8.8   \n",
       "4              Pulp Fiction  154 min               Crime, Drama     8.9   \n",
       "\n",
       "            director      votes gross_earn  12  12A  15  18  A  PG  U  X  \\\n",
       "0     Frank Darabont  26,26,905    $28.34M   0    0   1   0  0   0  0  0   \n",
       "1  Christopher Nolan  25,98,173   $534.86M   0    1   0   0  0   0  0  0   \n",
       "2  Christopher Nolan  23,04,062   $292.58M   0    1   0   0  0   0  0  0   \n",
       "3      David Fincher  20,71,088    $37.03M   0    0   0   1  0   0  0  0   \n",
       "4  Quentin Tarantino  20,11,013   $107.93M   0    0   0   1  0   0  0  0   \n",
       "\n",
       "   director_experience  num_genres main_genre director_level  \n",
       "0                    4           1      Drama              2  \n",
       "1                    9           3     Action              3  \n",
       "2                    9           3     Action              3  \n",
       "3                   10           1      Drama              3  \n",
       "4                    9           2      Crime              3  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies1_clean.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "7d8222c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "movies1_clean['runtime'] = movies1_clean['runtime'].astype(str).str.replace(' min', '').astype(float)\n",
    "movies1_clean['votes'] = movies1_clean['votes'].astype(str).str.replace(',', '').astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "79339378",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "fda30026",
   "metadata": {},
   "outputs": [],
   "source": [
    "movies1_clean = movies1_clean.rename(columns={'gross_earn': 'gross_earn_millions'})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ab17139",
   "metadata": {},
   "outputs": [],
   "source": [
    "movies1_clean['gross_earn_millions'] = movies1_clean['gross_earn_millions'].apply(lambda x: float(x.replace('$', '').replace('M', '000000')) if isinstance(x, str) else x)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "9f50dec8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>runtime</th>\n",
       "      <th>genre</th>\n",
       "      <th>rating</th>\n",
       "      <th>director</th>\n",
       "      <th>votes</th>\n",
       "      <th>gross_earn_millions</th>\n",
       "      <th>12</th>\n",
       "      <th>12A</th>\n",
       "      <th>15</th>\n",
       "      <th>18</th>\n",
       "      <th>A</th>\n",
       "      <th>PG</th>\n",
       "      <th>U</th>\n",
       "      <th>X</th>\n",
       "      <th>director_experience</th>\n",
       "      <th>num_genres</th>\n",
       "      <th>main_genre</th>\n",
       "      <th>director_level</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Shawshank Redemption</td>\n",
       "      <td>142.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>9.3</td>\n",
       "      <td>Frank Darabont</td>\n",
       "      <td>2626905.0</td>\n",
       "      <td>28.34</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>Drama</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The Dark Knight</td>\n",
       "      <td>152.0</td>\n",
       "      <td>Action, Crime, Drama</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>2598173.0</td>\n",
       "      <td>534.86</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>Action</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Inception</td>\n",
       "      <td>148.0</td>\n",
       "      <td>Action, Adventure, Sci-Fi</td>\n",
       "      <td>8.8</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>2304062.0</td>\n",
       "      <td>292.58</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>Action</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Fight Club</td>\n",
       "      <td>139.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>8.8</td>\n",
       "      <td>David Fincher</td>\n",
       "      <td>2071088.0</td>\n",
       "      <td>37.03</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>Drama</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Pulp Fiction</td>\n",
       "      <td>154.0</td>\n",
       "      <td>Crime, Drama</td>\n",
       "      <td>8.9</td>\n",
       "      <td>Quentin Tarantino</td>\n",
       "      <td>2011013.0</td>\n",
       "      <td>107.93</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>Crime</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      title  runtime                      genre  rating  \\\n",
       "0  The Shawshank Redemption    142.0                      Drama     9.3   \n",
       "1           The Dark Knight    152.0       Action, Crime, Drama     9.0   \n",
       "2                 Inception    148.0  Action, Adventure, Sci-Fi     8.8   \n",
       "3                Fight Club    139.0                      Drama     8.8   \n",
       "4              Pulp Fiction    154.0               Crime, Drama     8.9   \n",
       "\n",
       "            director      votes  gross_earn_millions  12  12A  15  18  A  PG  \\\n",
       "0     Frank Darabont  2626905.0                28.34   0    0   1   0  0   0   \n",
       "1  Christopher Nolan  2598173.0               534.86   0    1   0   0  0   0   \n",
       "2  Christopher Nolan  2304062.0               292.58   0    1   0   0  0   0   \n",
       "3      David Fincher  2071088.0                37.03   0    0   0   1  0   0   \n",
       "4  Quentin Tarantino  2011013.0               107.93   0    0   0   1  0   0   \n",
       "\n",
       "   U  X  director_experience  num_genres main_genre director_level  \n",
       "0  0  0                    4           1      Drama              2  \n",
       "1  0  0                    9           3     Action              3  \n",
       "2  0  0                    9           3     Action              3  \n",
       "3  0  0                   10           1      Drama              3  \n",
       "4  0  0                    9           2      Crime              3  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies1_clean.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "53e13d27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4864, 19)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies1_clean.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "12d1274b",
   "metadata": {},
   "outputs": [],
   "source": [
    "movies1_clean.dropna(subset=['gross_earn_millions'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "b6c6603e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      runtime      votes  gross_earn_millions  rating\n",
      "0       142.0  2626905.0                28.34     9.3\n",
      "1       152.0  2598173.0               534.86     9.0\n",
      "2       148.0  2304062.0               292.58     8.8\n",
      "3       139.0  2071088.0                37.03     8.8\n",
      "4       154.0  2011013.0               107.93     8.9\n",
      "...       ...        ...                  ...     ...\n",
      "4992     94.0    20309.0                 6.24     6.2\n",
      "4993    117.0    25669.0                23.00     6.3\n",
      "4995    102.0    25112.0                 9.40     7.3\n",
      "4998     92.0    21536.0                 6.67     7.0\n",
      "4999    120.0    25097.0                 8.20     7.6\n",
      "\n",
      "[4483 rows x 4 columns]\n"
     ]
    }
   ],
   "source": [
    "selected_columns = ['runtime', 'votes', 'gross_earn_millions', 'rating']\n",
    "movies2_clean = movies1_clean[selected_columns]\n",
    "\n",
    "print(movies2_clean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "09166ec9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "6c79ee66",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     28.34\n",
       "1    534.86\n",
       "2    292.58\n",
       "3     37.03\n",
       "4    107.93\n",
       "Name: gross_earn_millions, dtype: float64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = movies2_clean.drop(columns = ['gross_earn_millions'])\n",
    "X.head()\n",
    "y = movies2_clean['gross_earn_millions']\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "610d25e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 1984)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d04e8832",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "25e21366",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "OLS = LinearRegression()\n",
    "\n",
    "OLS.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "18a67939",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept is 83.23899840384124\n",
      "The set of coefficients are [ 2.22167851e-01  2.01805782e-04 -1.32913659e+01]\n",
      "The R-Squared value is 0.3788280608793311\n"
     ]
    }
   ],
   "source": [
    "print('Intercept is ' + str(OLS.intercept_))\n",
    "print('The set of coefficients are ' + str(OLS.coef_))\n",
    "print(\"The R-Squared value is \" + str(OLS.score(X_train, y_train)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "219bde57",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PREDICTIONS</th>\n",
       "      <th>ACTUAL VALUES</th>\n",
       "      <th>ERROR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4795</th>\n",
       "      <td>56.701975</td>\n",
       "      <td>368.38</td>\n",
       "      <td>311.678025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4191</th>\n",
       "      <td>22.929110</td>\n",
       "      <td>35.11</td>\n",
       "      <td>12.180890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>334</th>\n",
       "      <td>95.128456</td>\n",
       "      <td>125.32</td>\n",
       "      <td>30.191544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4499</th>\n",
       "      <td>35.662334</td>\n",
       "      <td>14.45</td>\n",
       "      <td>-21.212334</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2516</th>\n",
       "      <td>26.580502</td>\n",
       "      <td>17.28</td>\n",
       "      <td>-9.300502</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      PREDICTIONS  ACTUAL VALUES       ERROR\n",
       "4795    56.701975         368.38  311.678025\n",
       "4191    22.929110          35.11   12.180890\n",
       "334     95.128456         125.32   30.191544\n",
       "4499    35.662334          14.45  -21.212334\n",
       "2516    26.580502          17.28   -9.300502"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = OLS.predict(X_test)\n",
    "performance = pd.DataFrame({\"PREDICTIONS\": y_pred, \"ACTUAL VALUES\": y_test})\n",
    "performance['ERROR'] = performance['ACTUAL VALUES'] - performance['PREDICTIONS']\n",
    "performance.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "a59ddccb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>PREDICTIONS</th>\n",
       "      <th>ACTUAL VALUES</th>\n",
       "      <th>ERROR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>56.701975</td>\n",
       "      <td>368.38</td>\n",
       "      <td>311.678025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>22.929110</td>\n",
       "      <td>35.11</td>\n",
       "      <td>12.180890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>95.128456</td>\n",
       "      <td>125.32</td>\n",
       "      <td>30.191544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>35.662334</td>\n",
       "      <td>14.45</td>\n",
       "      <td>-21.212334</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>26.580502</td>\n",
       "      <td>17.28</td>\n",
       "      <td>-9.300502</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index  PREDICTIONS  ACTUAL VALUES       ERROR\n",
       "0      0    56.701975         368.38  311.678025\n",
       "1      1    22.929110          35.11   12.180890\n",
       "2      2    95.128456         125.32   30.191544\n",
       "3      3    35.662334          14.45  -21.212334\n",
       "4      4    26.580502          17.28   -9.300502"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "performance.reset_index(drop = True, inplace = True)\n",
    "performance.reset_index(inplace = True)\n",
    "performance.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "f339101a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Residuals')"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize = (10,5))\n",
    "plt.bar('index', 'ERROR', data = performance[:50], color = 'red', width = 0.3)\n",
    "plt.xlabel(\"Observations\")\n",
    "plt.ylabel(\"Residuals\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "2719591f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>gross_earn_millions</td> <th>  R-squared:         </th> <td>   0.379</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                    <td>OLS</td>         <th>  Adj. R-squared:    </th> <td>   0.378</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>              <td>Least Squares</td>    <th>  F-statistic:       </th> <td>   728.2</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>              <td>Sun, 23 Apr 2023</td>   <th>  Prob (F-statistic):</th>  <td>  0.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                  <td>18:46:58</td>       <th>  Log-Likelihood:    </th> <td> -19305.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>       <td>  3586</td>        <th>  AIC:               </th> <td>3.862e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>           <td>  3582</td>        <th>  BIC:               </th> <td>3.864e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>               <td>     3</td>        <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>       <td>nonrobust</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "     <td></td>        <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>   <td>   83.2390</td> <td>    7.092</td> <td>   11.738</td> <td> 0.000</td> <td>   69.335</td> <td>   97.143</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>runtime</th> <td>    0.2222</td> <td>    0.047</td> <td>    4.702</td> <td> 0.000</td> <td>    0.130</td> <td>    0.315</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>votes</th>   <td>    0.0002</td> <td> 4.53e-06</td> <td>   44.505</td> <td> 0.000</td> <td>    0.000</td> <td>    0.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>rating</th>  <td>  -13.2914</td> <td>    1.046</td> <td>  -12.704</td> <td> 0.000</td> <td>  -15.343</td> <td>  -11.240</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>1600.721</td> <th>  Durbin-Watson:     </th> <td>   1.947</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th>  <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>30427.125</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>           <td> 1.650</td>  <th>  Prob(JB):          </th> <td>    0.00</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>       <td>16.883</td>  <th>  Cond. No.          </th> <td>2.12e+06</td> \n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 2.12e+06. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                             OLS Regression Results                            \n",
       "===============================================================================\n",
       "Dep. Variable:     gross_earn_millions   R-squared:                       0.379\n",
       "Model:                             OLS   Adj. R-squared:                  0.378\n",
       "Method:                  Least Squares   F-statistic:                     728.2\n",
       "Date:                 Sun, 23 Apr 2023   Prob (F-statistic):               0.00\n",
       "Time:                         18:46:58   Log-Likelihood:                -19305.\n",
       "No. Observations:                 3586   AIC:                         3.862e+04\n",
       "Df Residuals:                     3582   BIC:                         3.864e+04\n",
       "Df Model:                            3                                         \n",
       "Covariance Type:             nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "const         83.2390      7.092     11.738      0.000      69.335      97.143\n",
       "runtime        0.2222      0.047      4.702      0.000       0.130       0.315\n",
       "votes          0.0002   4.53e-06     44.505      0.000       0.000       0.000\n",
       "rating       -13.2914      1.046    -12.704      0.000     -15.343     -11.240\n",
       "==============================================================================\n",
       "Omnibus:                     1600.721   Durbin-Watson:                   1.947\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            30427.125\n",
       "Skew:                           1.650   Prob(JB):                         0.00\n",
       "Kurtosis:                      16.883   Cond. No.                     2.12e+06\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 2.12e+06. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "X_train = sm.add_constant(X_train)\n",
    "nicerOLS = sm.OLS(y_train, X_train).fit()\n",
    "nicerOLS.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "e72f603d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      runtime      votes  gross_earn_millions  rating  12  12A  15  18  A  PG  \\\n",
      "0       142.0  2626905.0                28.34     9.3   0    0   1   0  0   0   \n",
      "1       152.0  2598173.0               534.86     9.0   0    1   0   0  0   0   \n",
      "2       148.0  2304062.0               292.58     8.8   0    1   0   0  0   0   \n",
      "3       139.0  2071088.0                37.03     8.8   0    0   0   1  0   0   \n",
      "4       154.0  2011013.0               107.93     8.9   0    0   0   1  0   0   \n",
      "...       ...        ...                  ...     ...  ..  ...  ..  .. ..  ..   \n",
      "4992     94.0    20309.0                 6.24     6.2   1    0   0   0  0   0   \n",
      "4993    117.0    25669.0                23.00     6.3   0    0   0   0  0   0   \n",
      "4995    102.0    25112.0                 9.40     7.3   0    0   0   0  0   0   \n",
      "4998     92.0    21536.0                 6.67     7.0   0    0   0   0  0   1   \n",
      "4999    120.0    25097.0                 8.20     7.6   0    0   0   0  0   0   \n",
      "\n",
      "      U  X director_level  \n",
      "0     0  0              2  \n",
      "1     0  0              3  \n",
      "2     0  0              3  \n",
      "3     0  0              3  \n",
      "4     0  0              3  \n",
      "...  .. ..            ...  \n",
      "4992  0  0              2  \n",
      "4993  0  1              1  \n",
      "4995  1  0              2  \n",
      "4998  0  0              2  \n",
      "4999  0  1              3  \n",
      "\n",
      "[4483 rows x 13 columns]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>runtime</th>\n",
       "      <th>votes</th>\n",
       "      <th>gross_earn_millions</th>\n",
       "      <th>rating</th>\n",
       "      <th>12</th>\n",
       "      <th>12A</th>\n",
       "      <th>15</th>\n",
       "      <th>18</th>\n",
       "      <th>A</th>\n",
       "      <th>PG</th>\n",
       "      <th>U</th>\n",
       "      <th>X</th>\n",
       "      <th>director_level</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>142.0</td>\n",
       "      <td>2626905.0</td>\n",
       "      <td>28.34</td>\n",
       "      <td>9.3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>152.0</td>\n",
       "      <td>2598173.0</td>\n",
       "      <td>534.86</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>148.0</td>\n",
       "      <td>2304062.0</td>\n",
       "      <td>292.58</td>\n",
       "      <td>8.8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>139.0</td>\n",
       "      <td>2071088.0</td>\n",
       "      <td>37.03</td>\n",
       "      <td>8.8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>154.0</td>\n",
       "      <td>2011013.0</td>\n",
       "      <td>107.93</td>\n",
       "      <td>8.9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   runtime      votes  gross_earn_millions  rating  12  12A  15  18  A  PG  U  \\\n",
       "0    142.0  2626905.0                28.34     9.3   0    0   1   0  0   0  0   \n",
       "1    152.0  2598173.0               534.86     9.0   0    1   0   0  0   0  0   \n",
       "2    148.0  2304062.0               292.58     8.8   0    1   0   0  0   0  0   \n",
       "3    139.0  2071088.0                37.03     8.8   0    0   0   1  0   0  0   \n",
       "4    154.0  2011013.0               107.93     8.9   0    0   0   1  0   0  0   \n",
       "\n",
       "   X director_level  \n",
       "0  0              2  \n",
       "1  0              3  \n",
       "2  0              3  \n",
       "3  0              3  \n",
       "4  0              3  "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_columns = ['runtime', 'votes', 'gross_earn_millions', 'rating', '12', '12A', '15', '18', 'A', 'PG', 'U', 'X', 'director_level']\n",
    "movies3_clean = movies1_clean[selected_columns]\n",
    "\n",
    "print(movies3_clean)\n",
    "movies3_clean.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "062608a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>runtime</th>\n",
       "      <th>genre</th>\n",
       "      <th>rating</th>\n",
       "      <th>director</th>\n",
       "      <th>votes</th>\n",
       "      <th>gross_earn_millions</th>\n",
       "      <th>12</th>\n",
       "      <th>12A</th>\n",
       "      <th>15</th>\n",
       "      <th>18</th>\n",
       "      <th>A</th>\n",
       "      <th>PG</th>\n",
       "      <th>U</th>\n",
       "      <th>X</th>\n",
       "      <th>director_experience</th>\n",
       "      <th>num_genres</th>\n",
       "      <th>main_genre</th>\n",
       "      <th>director_level</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Shawshank Redemption</td>\n",
       "      <td>142.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>9.3</td>\n",
       "      <td>Frank Darabont</td>\n",
       "      <td>2626905.0</td>\n",
       "      <td>28.34</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>Drama</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The Dark Knight</td>\n",
       "      <td>152.0</td>\n",
       "      <td>Action, Crime, Drama</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>2598173.0</td>\n",
       "      <td>534.86</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>Action</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Inception</td>\n",
       "      <td>148.0</td>\n",
       "      <td>Action, Adventure, Sci-Fi</td>\n",
       "      <td>8.8</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>2304062.0</td>\n",
       "      <td>292.58</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>Action</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Fight Club</td>\n",
       "      <td>139.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>8.8</td>\n",
       "      <td>David Fincher</td>\n",
       "      <td>2071088.0</td>\n",
       "      <td>37.03</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>Drama</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Pulp Fiction</td>\n",
       "      <td>154.0</td>\n",
       "      <td>Crime, Drama</td>\n",
       "      <td>8.9</td>\n",
       "      <td>Quentin Tarantino</td>\n",
       "      <td>2011013.0</td>\n",
       "      <td>107.93</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>Crime</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      title  runtime                      genre  rating  \\\n",
       "0  The Shawshank Redemption    142.0                      Drama     9.3   \n",
       "1           The Dark Knight    152.0       Action, Crime, Drama     9.0   \n",
       "2                 Inception    148.0  Action, Adventure, Sci-Fi     8.8   \n",
       "3                Fight Club    139.0                      Drama     8.8   \n",
       "4              Pulp Fiction    154.0               Crime, Drama     8.9   \n",
       "\n",
       "            director      votes  gross_earn_millions  12  12A  15  18  A  PG  \\\n",
       "0     Frank Darabont  2626905.0                28.34   0    0   1   0  0   0   \n",
       "1  Christopher Nolan  2598173.0               534.86   0    1   0   0  0   0   \n",
       "2  Christopher Nolan  2304062.0               292.58   0    1   0   0  0   0   \n",
       "3      David Fincher  2071088.0                37.03   0    0   0   1  0   0   \n",
       "4  Quentin Tarantino  2011013.0               107.93   0    0   0   1  0   0   \n",
       "\n",
       "   U  X  director_experience  num_genres main_genre director_level  \n",
       "0  0  0                    4           1      Drama              2  \n",
       "1  0  0                    9           3     Action              3  \n",
       "2  0  0                    9           3     Action              3  \n",
       "3  0  0                   10           1      Drama              3  \n",
       "4  0  0                    9           2      Crime              3  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies1_clean.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "8a8728b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Drama' 'Action' 'Crime' 'Adventure' 'Biography' 'Mystery' 'Animation'\n",
      " 'Comedy' 'Sci-Fi' 'Horror' 'Fantasy' 'Romance' 'Western' 'Family'\n",
      " 'Film-Noir' 'Thriller']\n"
     ]
    }
   ],
   "source": [
    "print(movies1_clean['main_genre'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "57b4239c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "le = LabelEncoder()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "9b1b6bdd",
   "metadata": {},
   "outputs": [],
   "source": [
    "genre_map = {'Action': 1, 'Adventure': 2, 'Animation': 3, 'Biography': 4, 'Comedy': 5, 'Crime': 6, 'Documentary': 7, 'Drama': 8, 'Family': 9, 'Fantasy': 10, 'History': 11, 'Horror': 12, 'Music': 13, 'Musical': 14, 'Mystery': 15, 'Romance': 16, 'Sci-Fi': 17, 'Sport': 18, 'Thriller': 19, 'War': 20, 'Western': 21}\n",
    "movies1_clean['main_genre'] = movies1_clean['main_genre'].map(genre_map)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "60ed2dfa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>runtime</th>\n",
       "      <th>genre</th>\n",
       "      <th>rating</th>\n",
       "      <th>director</th>\n",
       "      <th>votes</th>\n",
       "      <th>gross_earn_millions</th>\n",
       "      <th>12</th>\n",
       "      <th>12A</th>\n",
       "      <th>15</th>\n",
       "      <th>18</th>\n",
       "      <th>A</th>\n",
       "      <th>PG</th>\n",
       "      <th>U</th>\n",
       "      <th>X</th>\n",
       "      <th>director_experience</th>\n",
       "      <th>num_genres</th>\n",
       "      <th>main_genre</th>\n",
       "      <th>director_level</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Shawshank Redemption</td>\n",
       "      <td>142.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>9.3</td>\n",
       "      <td>Frank Darabont</td>\n",
       "      <td>2626905.0</td>\n",
       "      <td>28.34</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The Dark Knight</td>\n",
       "      <td>152.0</td>\n",
       "      <td>Action, Crime, Drama</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>2598173.0</td>\n",
       "      <td>534.86</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Inception</td>\n",
       "      <td>148.0</td>\n",
       "      <td>Action, Adventure, Sci-Fi</td>\n",
       "      <td>8.8</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>2304062.0</td>\n",
       "      <td>292.58</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Fight Club</td>\n",
       "      <td>139.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>8.8</td>\n",
       "      <td>David Fincher</td>\n",
       "      <td>2071088.0</td>\n",
       "      <td>37.03</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>8.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Pulp Fiction</td>\n",
       "      <td>154.0</td>\n",
       "      <td>Crime, Drama</td>\n",
       "      <td>8.9</td>\n",
       "      <td>Quentin Tarantino</td>\n",
       "      <td>2011013.0</td>\n",
       "      <td>107.93</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      title  runtime                      genre  rating  \\\n",
       "0  The Shawshank Redemption    142.0                      Drama     9.3   \n",
       "1           The Dark Knight    152.0       Action, Crime, Drama     9.0   \n",
       "2                 Inception    148.0  Action, Adventure, Sci-Fi     8.8   \n",
       "3                Fight Club    139.0                      Drama     8.8   \n",
       "4              Pulp Fiction    154.0               Crime, Drama     8.9   \n",
       "\n",
       "            director      votes  gross_earn_millions  12  12A  15  18  A  PG  \\\n",
       "0     Frank Darabont  2626905.0                28.34   0    0   1   0  0   0   \n",
       "1  Christopher Nolan  2598173.0               534.86   0    1   0   0  0   0   \n",
       "2  Christopher Nolan  2304062.0               292.58   0    1   0   0  0   0   \n",
       "3      David Fincher  2071088.0                37.03   0    0   0   1  0   0   \n",
       "4  Quentin Tarantino  2011013.0               107.93   0    0   0   1  0   0   \n",
       "\n",
       "   U  X  director_experience  num_genres  main_genre director_level  \n",
       "0  0  0                    4           1         8.0              2  \n",
       "1  0  0                    9           3         1.0              3  \n",
       "2  0  0                    9           3         1.0              3  \n",
       "3  0  0                   10           1         8.0              3  \n",
       "4  0  0                    9           2         6.0              3  "
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies1_clean.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "dafc86fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>runtime</th>\n",
       "      <th>votes</th>\n",
       "      <th>gross_earn_millions</th>\n",
       "      <th>rating</th>\n",
       "      <th>12</th>\n",
       "      <th>12A</th>\n",
       "      <th>15</th>\n",
       "      <th>18</th>\n",
       "      <th>A</th>\n",
       "      <th>PG</th>\n",
       "      <th>U</th>\n",
       "      <th>X</th>\n",
       "      <th>director_experience</th>\n",
       "      <th>num_genres</th>\n",
       "      <th>main_genre</th>\n",
       "      <th>director_level</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>142.0</td>\n",
       "      <td>2626905.0</td>\n",
       "      <td>28.34</td>\n",
       "      <td>9.3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>152.0</td>\n",
       "      <td>2598173.0</td>\n",
       "      <td>534.86</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>148.0</td>\n",
       "      <td>2304062.0</td>\n",
       "      <td>292.58</td>\n",
       "      <td>8.8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>139.0</td>\n",
       "      <td>2071088.0</td>\n",
       "      <td>37.03</td>\n",
       "      <td>8.8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>8.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>154.0</td>\n",
       "      <td>2011013.0</td>\n",
       "      <td>107.93</td>\n",
       "      <td>8.9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   runtime      votes  gross_earn_millions  rating  12  12A  15  18  A  PG  U  \\\n",
       "0    142.0  2626905.0                28.34     9.3   0    0   1   0  0   0  0   \n",
       "1    152.0  2598173.0               534.86     9.0   0    1   0   0  0   0  0   \n",
       "2    148.0  2304062.0               292.58     8.8   0    1   0   0  0   0  0   \n",
       "3    139.0  2071088.0                37.03     8.8   0    0   0   1  0   0  0   \n",
       "4    154.0  2011013.0               107.93     8.9   0    0   0   1  0   0  0   \n",
       "\n",
       "   X  director_experience  num_genres  main_genre director_level  \n",
       "0  0                    4           1         8.0              2  \n",
       "1  0                    9           3         1.0              3  \n",
       "2  0                    9           3         1.0              3  \n",
       "3  0                   10           1         8.0              3  \n",
       "4  0                    9           2         6.0              3  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_columns = ['runtime', 'votes', 'gross_earn_millions', 'rating', '12', '12A', '15', '18', 'A', 'PG', 'U', 'X', 'director_experience', 'num_genres', 'main_genre', 'director_level']\n",
    "movies_rf = movies1_clean[selected_columns]\n",
    "\n",
    "movies_rf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "6bdd555e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "runtime                 float64\n",
       "votes                   float64\n",
       "gross_earn_millions     float64\n",
       "rating                  float64\n",
       "12                        uint8\n",
       "12A                       uint8\n",
       "15                        uint8\n",
       "18                        uint8\n",
       "A                         uint8\n",
       "PG                        uint8\n",
       "U                         uint8\n",
       "X                         uint8\n",
       "director_experience       int64\n",
       "num_genres                int64\n",
       "main_genre              float64\n",
       "director_level         category\n",
       "dtype: object"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies_rf.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "141bcbce",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/qh/81164_ks5gn9fq0dc70qm_fh0000gn/T/ipykernel_59329/1344905347.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  movies_rf.dropna(inplace=True)\n"
     ]
    }
   ],
   "source": [
    "movies_rf.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "925ccb31",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/qh/81164_ks5gn9fq0dc70qm_fh0000gn/T/ipykernel_59329/773963775.py:2: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only.\n",
      "  X_train, X_test, y_train, y_test = train_test_split(movies_rf.drop('gross_earn_millions', 1), movies_rf['gross_earn_millions'], test_size=0.2, random_state=1984)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(movies_rf.drop('gross_earn_millions', 1), movies_rf['gross_earn_millions'], test_size=0.2, random_state=1984)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "dbc4e66b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data score:  1.0\n",
      "Test data score:  0.3087403400841886\n"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "tree = DecisionTreeRegressor()\n",
    "tree.fit(X_train, y_train)\n",
    "\n",
    "train_data_score = tree.score(X_train, y_train)\n",
    "test_data_score = tree.score(X_test, y_test)\n",
    "\n",
    "print(\"Training data score: \", train_data_score)\n",
    "print(\"Test data score: \", test_data_score)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "44d50e75",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data score:  0.753741738393543\n",
      "Test data score:  0.5457649985714974\n"
     ]
    }
   ],
   "source": [
    "tree2 = DecisionTreeRegressor(max_depth = 8)\n",
    "tree2.fit(X_train, y_train)\n",
    "\n",
    "train_data_score = tree2.score(X_train, y_train)\n",
    "test_data_score = tree2.score(X_test, y_test)\n",
    "\n",
    "print(\"Training data score: \", train_data_score)\n",
    "print(\"Test data score: \", test_data_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "39a80415",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data score:  0.9245942669628149\n",
      "Test data score:  0.582407231636417\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "forest = RandomForestRegressor(n_estimators=10, random_state=1984)\n",
    "forest.fit(X_train, y_train)\n",
    "\n",
    "train_data_score = forest.score(X_train, y_train)\n",
    "test_data_score = forest.score(X_test, y_test)\n",
    "\n",
    "print(\"Training data score: \", train_data_score)\n",
    "print(\"Test data score: \", test_data_score)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fcf9517d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "5adcc567",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "\n",
    "gbtree = GradientBoostingRegressor(learning_rate = 0.3, max_depth = 2, random_state = 1984)\n",
    "gbtree.fit(X_train, y_train)\n",
    "\n",
    "y_pred = gbtree.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "f7cd8dfd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data score:  0.7435101235187883\n",
      "Test data score:  0.6617356154391785\n"
     ]
    }
   ],
   "source": [
    "train_data_score = gbtree.score(X_train, y_train)\n",
    "test_data_score = gbtree.score(X_test, y_test)\n",
    "\n",
    "print(\"Training data score: \", train_data_score)\n",
    "print(\"Test data score: \", test_data_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d3c75b5d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "872b5ad7",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/filipe/opt/anaconda3/lib/python3.9/site-packages/sklearn/utils/validation.py:964: FutureWarning: Arrays of bytes/strings is being converted to decimal numbers if dtype='numeric'. This behavior is deprecated in 0.24 and will be removed in 1.1 (renaming of 0.26). Please convert your data to numeric values explicitly instead.\n",
      "  X = check_array(\n",
      "/Users/filipe/opt/anaconda3/lib/python3.9/site-packages/sklearn/base.py:566: FutureWarning: Arrays of bytes/strings is being converted to decimal numbers if dtype='numeric'. This behavior is deprecated in 0.24 and will be removed in 1.1 (renaming of 0.26). Please convert your data to numeric values explicitly instead.\n",
      "  X = check_array(X, **check_params)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "\n",
    "knn = KNeighborsRegressor(n_neighbors=5)\n",
    "knn.fit(X_train, y_train)\n",
    "y_pred = knn.predict(X_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "2502b871",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data score:  0.5156072750680323\n",
      "Test data score:  0.33429913378824494\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/filipe/opt/anaconda3/lib/python3.9/site-packages/sklearn/base.py:566: FutureWarning: Arrays of bytes/strings is being converted to decimal numbers if dtype='numeric'. This behavior is deprecated in 0.24 and will be removed in 1.1 (renaming of 0.26). Please convert your data to numeric values explicitly instead.\n",
      "  X = check_array(X, **check_params)\n",
      "/Users/filipe/opt/anaconda3/lib/python3.9/site-packages/sklearn/base.py:566: FutureWarning: Arrays of bytes/strings is being converted to decimal numbers if dtype='numeric'. This behavior is deprecated in 0.24 and will be removed in 1.1 (renaming of 0.26). Please convert your data to numeric values explicitly instead.\n",
      "  X = check_array(X, **check_params)\n"
     ]
    }
   ],
   "source": [
    "train_data_score = knn.score(X_train, y_train)\n",
    "test_data_score = knn.score(X_test, y_test)\n",
    "\n",
    "print(\"Training data score: \", train_data_score)\n",
    "print(\"Test data score: \", test_data_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "176cc1b2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
